位1的个数


编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

 

提示：

请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
 

进阶：

如果多次调用这个函数，你将如何优化你的算法？
 

示例 1：

输入：00000000000000000000000000001011
输出：3
解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。


我们只需要将该数字与其减一之后的值进行与运算，然后再次循环，直到为0，
其循环的次数就是该数字中1的个数。原理就是n&n-1一定可以消去该数字最后一位的1。
大家可以这样理解，不管对于n中最后一个一的位置如何比如为....1000...（N个）
假设1的后面有N个0，对于该数字减一而言就变成了....01111....(N个)后面的0全部就因为借位变成了1，
此时将两个数字相与就会把最后一个1之后（包括1）全部变成了0.同理如此循环一定能将所有的1全部变成0，
这样循环的次数就变成了消去1的次数，也就是1的个数


class Solution {
public:
    int hammingWeight(uint32_t n) {
        int m = 0 ;
        for(;n;m++)
            n &= n-1;
        return m;
    }
};


class Solution {
public:
    //解法1:C++二进制容器
    int hammingWeight_1(uint32_t n) {
        bitset<32> b(n);
        return b.count();//返回1的个数
    }
    
    //解法2：除2取余法
    int hammingWeight_2(uint32_t n) {
        int count=0;
        while(n){
            if(n%2==1)count++;
            n/=2;
        }
        return count;
    }
    
    //解法3：直接判读最低为是否为1即可
    int hammingWeight_3(uint32_t n) {
        int count=0;
        while(n){
            count+=n&1;//比如111与1相与得到001，所以直接判断最低位是不是1就好了
            n>>=1;//缩小2倍，给面试官装逼用的
        }
        return count;
    }
    
    //解法4：技巧法。由于在二进制表示中，数字n中最低位的1总是对应n-1中的0。因此，将n和n-1与运算总是n中最低位的1变成0（最低位的0不考虑）,并保持其他位不变。
    int hammingWeight_4(uint32_t n) {
        int count=0;
        while(n){
            count++;
            n&=n-1;
        }
        return count;
    }
};


